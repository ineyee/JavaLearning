package _05_内部类;

/*
 * 1、定义类嘛，我一个.java文件对应定义一个类不就好了吗？为啥要把不同的类放在同一个文件里呢？
 * 其实其它语言也会有同样的问题，当我们考虑把多个类写在同一个文件里的时候，一般都是这几个类之间
 * 有特别紧密的联系，甚至这几个类其中只有一个是对外公开的，其它几个类都是只在这个公开类内部私有使用的，外界绝对不会使用
 * 这样代码的封装性就更好，代码的目录结构也更简单，代码的可读性和维护性也更好（别人一看就知道这个类
 * 只在内部使用，那精力就集中在这个类内部就可以了，就不用担心外界什么地方是否使用了这个类），就像
 * Person类里的那个Cat类一样
 * 
 * 2、好的，即便确实会有把多个类定义在同一个文件里的场景，那Java又为什么不直接把那些类定义在同一个文件里呢？而是把那些类定义成内部类呢？
 * 其它语言里的确都是定义几个平级的顶级类，然后不对外暴露的用private修饰一下就完事了，
 * 但是Java里只能是public和无修饰符修饰顶级类，这就导致这些类虽然写在同一个文件里了，但不是真正的私有，因为就算无修饰符，起码也是包内可见
 * 而写成内部类，就可以用private修饰了，就是真正的私有了
 * 
 * 3、好的，那我们在什么场景下会把一个类定义成静态内部类呢？什么情况下又会把一个类定义成非静态内部类呢？
 * 我们知道静态内部类和非静态内部类分别丢掉了什么自由、又相应的获得了那些特殊权限，所以我们就可以根据需求想定义成什么就定义成什么
 * 但是建议在定义内部类的时候优先定义成静态内部类，如果静态内部类不满足你的需求，再改成内部类，毕竟内部类必须得外部类的实例才能使用，这很麻烦的，这是Java官方的建议
 */
